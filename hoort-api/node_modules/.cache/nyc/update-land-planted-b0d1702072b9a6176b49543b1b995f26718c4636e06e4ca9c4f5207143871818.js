function cov_shw3uibjk(){var path="/Users/So/bootcamp/collab/skylab-bootcamp-202001/staff/sofia-costa/hoort/hoort-api/logic/update-land-planted.js";var hash="42d9bee0615762dba258fc00d85e1879a71916d8";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/So/bootcamp/collab/skylab-bootcamp-202001/staff/sofia-costa/hoort/hoort-api/logic/update-land-planted.js",statementMap:{"0":{start:{line:1,column:21},end:{line:1,column:43}},"1":{start:{line:2,column:29},end:{line:2,column:50}},"2":{start:{line:4,column:0},end:{line:34,column:1}},"3":{start:{line:5,column:8},end:{line:5,column:41}},"4":{start:{line:6,column:8},end:{line:6,column:41}},"5":{start:{line:7,column:8},end:{line:7,column:31}},"6":{start:{line:9,column:19},end:{line:9,column:46}},"7":{start:{line:11,column:8},end:{line:11,column:62}},"8":{start:{line:11,column:19},end:{line:11,column:62}},"9":{start:{line:13,column:8},end:{line:32,column:69}},"10":{start:{line:14,column:16},end:{line:14,column:36}},"11":{start:{line:16,column:16},end:{line:16,column:33}},"12":{start:{line:18,column:16},end:{line:18,column:38}},"13":{start:{line:20,column:16},end:{line:23,column:18}},"14":{start:{line:21,column:24},end:{line:21,column:55}},"15":{start:{line:22,column:24},end:{line:22,column:40}},"16":{start:{line:25,column:16},end:{line:25,column:45}},"17":{start:{line:26,column:16},end:{line:26,column:31}},"18":{start:{line:27,column:16},end:{line:27,column:31}},"19":{start:{line:29,column:16},end:{line:29,column:27}},"20":{start:{line:32,column:13},end:{line:32,column:69}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:4,column:17},end:{line:4,column:18}},loc:{start:{line:4,column:51},end:{line:34,column:1}},line:4},"1":{name:"(anonymous_1)",decl:{start:{line:20,column:40},end:{line:20,column:41}},loc:{start:{line:20,column:49},end:{line:23,column:17}},line:20}},branchMap:{"0":{loc:{start:{line:11,column:8},end:{line:11,column:62}},type:"if",locations:[{start:{line:11,column:8},end:{line:11,column:62}},{start:{line:11,column:8},end:{line:11,column:62}}],line:11},"1":{loc:{start:{line:13,column:8},end:{line:32,column:69}},type:"if",locations:[{start:{line:13,column:8},end:{line:32,column:69}},{start:{line:13,column:8},end:{line:32,column:69}}],line:13}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0},f:{"0":0,"1":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"42d9bee0615762dba258fc00d85e1879a71916d8"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];cov_shw3uibjk=function(){return actualCoverage;};return actualCoverage;}cov_shw3uibjk();const{validate}=(cov_shw3uibjk().s[0]++,require('hoort-utils'));const{models:{Land}}=(cov_shw3uibjk().s[1]++,require('hoort-data'));cov_shw3uibjk().s[2]++;module.exports=async(userId,landId,scheme)=>{cov_shw3uibjk().f[0]++;cov_shw3uibjk().s[3]++;validate.string(userId,'userId');cov_shw3uibjk().s[4]++;validate.string(landId,'landId');cov_shw3uibjk().s[5]++;validate.scheme(scheme);let land=(cov_shw3uibjk().s[6]++,await Land.findById(landId));cov_shw3uibjk().s[7]++;if(!land){cov_shw3uibjk().b[0][0]++;cov_shw3uibjk().s[8]++;throw new Error('This land doesn\'t exist');}else{cov_shw3uibjk().b[0][1]++;}cov_shw3uibjk().s[9]++;if(scheme.length===land.scheme.length){cov_shw3uibjk().b[1][0]++;cov_shw3uibjk().s[10]++;land.scheme=scheme;cov_shw3uibjk().s[11]++;await land.save();cov_shw3uibjk().s[12]++;land=land.toObject();cov_shw3uibjk().s[13]++;land.plantation.forEach(plant=>{cov_shw3uibjk().f[1]++;cov_shw3uibjk().s[14]++;plant.id=plant._id.toString();cov_shw3uibjk().s[15]++;delete plant._id;});cov_shw3uibjk().s[16]++;land.id=land._id.toString();cov_shw3uibjk().s[17]++;delete land._id;cov_shw3uibjk().s[18]++;delete land.__v;cov_shw3uibjk().s[19]++;return land;}else{cov_shw3uibjk().b[1][1]++;cov_shw3uibjk().s[20]++;throw new Error('Scheme divisions differ from original');}};// let veggies = []
// let newVeggies = []
// let otherNewVeggies = []
// return Land.findById(landId)
//     .then(async land => {
//         if (scheme.length === land.scheme.length) {
// for (let element of scheme) {
//     for (let i of element) {
//         if (!veggies.includes(i) && typeof i === 'string') {
//             veggies.push(i)
//         }
//     }
// }
// //console.log(veggies)
// for (let veggie of veggies) {
//     if (await Land.find({ plantation: { $elemMatch: { veggie }  } }) === null){
//         await Land.findByIdAndUpdate(landId, { $addToSet: { plantation: { veggie } } }).then(() => {})
//     }
// }
//         land.scheme = scheme
//         return land.save()
//             .then(land => land)
//     }
//     else throw new Error('Scheme divisions differ from original')
// }).then(land => land)
//, { $addToSet: { veggies: veggies } }
// for (let element of scheme) {
//     for (let i of element) {
//         if (!veggies.includes(i) && typeof i === 'string') {
//             veggies.push(i)
//         }
//     }
// }
// for (let i of veggies) newVeggies.push({veggie: i})
//console.log(newVeggies)
// land.scheme = scheme
// let plantation = land.plantation.toObject()//.then(plantations => plantations)
//let veggie = Land.find().
// debugger
// veggies.forEach(veggie => {
//     for (let element of plantation) {
//         if(veggies.includes(element.veggie.toString())) otherNewVeggies.push(element)
//         else if (!otherNewVeggies.includes(veggie)) otherNewVeggies.push(veggie)
//     }
// })
// console.log(plantation)
// veggies.forEach(veggie => {
//     for(let i = 0; i<plantation.length; i++){
//         // console.log(plantation[i].veggie.toString())
//         // console.log(veggie.veggie)
//         // console.log(plantation[i])
//         console.log(newVeggies.includes(land.plantation[i]))
//         if(plantation[i].veggie.toString() === veggie.veggie && !newVeggies.includes(land.plantation[i])) 
//             newVeggies.push(land.plantation[i])
//         else newVeggies.push(veggie)
//     }
//     console.log(newVeggies)
// })
//     let isThere = plantation.find(el => {
//         console.log(typeof veggie.veggie)
//         console.log(typeof el.veggie.toString())
//         console.log(el.veggie.toString() == veggie.veggie)
//         el.veggie.toString() == veggie.veggie
//     })
//         console.log(isThere)
//     if (isThere) newVeggies.push(land.plantation[land.plantation.indexOf(veggie)])
//     else newVeggies.push(veggie)
// })
//console.log(newVeggies)
// land.plantation = newVeggies
// let allVeggies = []
// veggies.forEach(veggie => allVeggies.push({_id: veggie}))
// console.log(allVeggies)
// if (!land.veggies.length) Land.findByIdAndUpdate(landId, { $set: { veggies: allVeggies } }).then(() => {})
// else land.veggies.forEach(veggie => {
//     if (!veggies.includes(veggie._id.toString())){
//         Land.findByIdAndUpdate(landId, { $pull: { veggies: {_id: veggie} } }).then(() => {})
//     }
//     else {
//         Land.findByIdAndUpdate(landId, { $addToSet: { veggies: {_id: veggie} } }).then(() => {})
//     }
//})
// veggies.forEach(veggie => {
//     Land.findByIdAndUpdate(landId, { $addToSet: { veggies: {_id: veggie} } }).then(() => {})
// })
//return land.save()
// .then(() => User.findById(userId))
// .then(user => {
//     user.lands.forEach(land => {
//         let notIncluded = []
//         return Land.findById(land.toString())
//             .then(_land => {
//                 for (let element of _land.veggies) {
//                     if (!user.veggies.includes(element._id)) {
//                         user.veggies.push(element._id)
//                     } else notIncluded.push(element._id)
//                 }
//                 console.log(notIncluded)
//                 console.log(user.veggies)
//                 notIncluded.forEach(el => { if(!user.veggies.includes(el)) user.veggies.splice(user.veggies.indexOf(el), 1) })
//                 return user.save()
//             })
//             .then(() => {})
//     })
// })
//.then(() => User.findByIdAndUpdate(userId, { $addToSet: { veggies: veggies } }))
//.then(() => )
//# sourceMappingURL=data:application/json;charset=utf-8;base64,